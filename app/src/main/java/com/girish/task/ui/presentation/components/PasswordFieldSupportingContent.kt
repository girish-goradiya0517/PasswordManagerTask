package com.girish.task.ui.presentation.components

import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.Autorenew
import androidx.compose.material3.FilledTonalIconButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButtonDefaults
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.lerp
import androidx.compose.ui.unit.dp
import com.girish.task.ui.theme.ButtonBackground
import com.girish.task.ui.theme.DashboardBackground

@Composable
fun PasswordFieldSupportingContent(
    modifier: Modifier = Modifier,
    errorText: String,
    passStrength: Pair<Float, String>,
    generatePassword: (Int) -> Unit,
) {


    var passGenerated by remember { mutableStateOf(false) }

    val animatedProgress = animateFloatAsState(
        targetValue = passStrength.first,
        animationSpec = tween(durationMillis = 1000),
        label = "Password Strength Meter"
    )

    val animatedButton = animateFloatAsState(
        targetValue = if (passGenerated) 1f else 720f,
        animationSpec = tween(1000),
        label = "Rotate Button"
    )

    val strengthColor = lerp(Color.Red, Color.Green, animatedProgress.value)

    Column(modifier = modifier.fillMaxWidth()) {

        Text(text = errorText)

        Spacer(modifier = Modifier.height(8.dp))

        Row(
            horizontalArrangement = Arrangement.SpaceBetween,
            modifier = Modifier.fillMaxWidth()
        ) {

            Column(
                modifier = Modifier
                    .fillMaxHeight()
                    .weight(1f)
            ) {

                Text(
                    text = passStrength.second.ifBlank { "No Password" },
                    color = strengthColor,
                    style = MaterialTheme.typography.titleSmall
                )

                Spacer(modifier = Modifier.height(8.dp))

                LinearProgressIndicator(
                    progress = { animatedProgress.value },
                    color = strengthColor,
                    strokeCap = StrokeCap.Round,
                    modifier = Modifier
                        .height(8.dp)
                        .fillMaxWidth()
                )
            }

            Spacer(modifier = Modifier.width(12.dp))

            FilledTonalIconButton(
                colors = IconButtonDefaults.iconButtonColors(contentColor = ButtonBackground, containerColor = DashboardBackground),
                onClick = {
                    passGenerated = !passGenerated
                    generatePassword(16)
                },
            ) {
                Icon(
                    imageVector = Icons.Rounded.Autorenew,
                    contentDescription = "Generate random password",
                    modifier = Modifier.rotate(animatedButton.value)
                )
            }
        }
    }
}